#=========================== 0 =======================

import tensorflow as tf
import os

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

x1 = tf.constant(5)  # won't change
x2 = tf.constant(6)

#  result = x1*x2
result = tf.multiply(x1, x2)  # define the model (not computes yet)

print(result)

sess = tf.Session()

print(sess.run(result))

sess.close()

#=========================== 1 =======================

import os
import tensorflow as tf

os.environ['TF_CPP_MIN_LOG_LEVEL']='2'

# Model parameters
W = tf.Variable([.3], dtype=tf.float32)
b = tf.Variable([-.3], dtype=tf.float32)
# Model input and output
x = tf.placeholder(tf.float32)
linear_model = W * x + b
y = tf.placeholder(tf.float32)

# loss
loss = tf.reduce_sum(tf.square(linear_model - y))  # sum of the squares
# optimizer
optimizer = tf.train.GradientDescentOptimizer(0.01)
train = optimizer.minimize(loss)

# training data
x_train = [1, 2, 3, 4]
y_train = [0, -1, -2, -3]
# training loop
init = tf.global_variables_initializer()
sess = tf.Session()
sess.run(init)  # reset values to wrong

curr_W, curr_b, curr_loss = sess.run([W, b, loss], {x: x_train, y: y_train})
print("W: %s b: %s loss: %s" % (curr_W, curr_b, curr_loss))

for i in range(300):
    sess.run(train, {x: x_train, y: y_train})
    # curr_W, curr_b, curr_loss = sess.run([W, b, loss], {x: x_train, y: y_train})
    # print("W: %s b: %s loss: %s"%(curr_W, curr_b, curr_loss))

# evaluate training accuracy
curr_W, curr_b, curr_loss = sess.run([W, b, loss], {x: x_train, y: y_train})
print("W: %s b: %s loss: %s" % (curr_W, curr_b, curr_loss))

#=========================== 2 =======================

from tensorflow.examples.tutorials.mnist import input_data
import tensorflow as tf

print("Reading mnist...")
sess = tf.InteractiveSession()
mnist = input_data.read_data_sets('MNIST_data', one_hot=True)

# softmax regression model
x = tf.placeholder(tf.float32, shape=[None, 784])
y_ = tf.placeholder(tf.float32, shape=[None, 10])
W = tf.Variable(tf.zeros([784, 10]))
b = tf.Variable(tf.zeros([10]))

y = tf.matmul(x, W) + b

cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y))

train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)

print("Training...")

sess.run(tf.global_variables_initializer())

print(mnist.train.next_batch)

for _ in range(1000):
    batch = mnist.train.next_batch(100)
    train_step.run({x: batch[0], y_: batch[1]})

correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

print("acc = ", accuracy.eval({x: mnist.test.images, y_: mnist.test.labels}))




























